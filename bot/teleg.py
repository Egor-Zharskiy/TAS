import telebot
from telebot import types
import sqlite3
import datetime
import time
import random
import colorama
from getmac import get_mac_address as gma
from colorama import Fore, Back, Style
colorama.init()
mac_a = gma()



#–ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ—ã –æ —Å–∏—Å—Ç–µ–º–µ


conn = sqlite3.connect("db_second.db")
c = conn.cursor()
sql = "SELECT system from cpu_inf WHERE num=1"
l = c.execute(sql).fetchall()
q = "SELECT * FROM cpu_inf"
all = c.execute(q).fetchall()
#print(mac_a == l[0][0])

if l[0][0] != mac_a:
    #–≤—Å—Ç–∞–≤–∫–∞ –≤ –±–¥ –Ω–æ–≤–æ–π –∏–Ω—Ñ—ã –æ cpu, –µ—Å–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç
    for i in all:
        if i[0] == 1:
            q = "UPDATE cpu_inf set system = ? WHERE num = ?"

    sql = "INSERT INTO cpu_inf(system)  WHERE num=1 values(?)"
    data = (mac_a, 1)
    c.execute(q, data)
    conn.commit() # –∫–∞–∂–¥—ã–π —Ä–∞–∑ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
    #–≤—Å—Ç–∞–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞ + –≤—Å—Ç–∞–≤–∫–∞ —Ç–∏—á–µ—Å—Ä–∫–æ–≥–æ –∞–π–¥–∏
    print(Fore.RED + '–í–≤–µ–¥–∏—Ç–µ token –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É—á–∞—â–∏–º–∏—Å—è.')
    #print()

    token = input(Style.RESET_ALL)
    q = "UPDATE   cpu_inf set token = ? WHERE num = ?"

    data = (token, 1)
    c.execute(q, data)
    conn.commit()
    #teacher id
    print(Fore.RED + "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à id –≤ Telegram, —á—Ç–æ–±—ã –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å –≤–∞–º –≤–æ–ø—Ä–æ—Å—ã –æ—Ç —É—á–µ–Ω–∏–∫–æ–≤"
                     "(–æ —Ç–æ–º, –∫–∞–∫ —É–∑–Ω–∞—Ç—å —Å–≤–æ–π id –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—á–∏—Ç–∞—Ç—å –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ.")
    #print()

    t_id = input(Style.RESET_ALL)
    q = "UPDATE   cpu_inf set teacher_id = ? WHERE num = ?"
    data = (t_id, 1)
    c.execute(q, data)
    conn.commit()
    print(Style.RESET_ALL)
    print(Back.BLUE + 'Token –±–æ—Ç–∞: ' + token)
    print('–í–∞—à id: ' + t_id)
    print(Style.RESET_ALL + '–í–≤–µ–¥–∏—Ç–µ "–¥–∞", –µ—Å–ª–∏ –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤–≤–µ–¥–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –≤—ã–≤–µ–¥–∏—Ç–µ "–Ω–µ—Ç"'
                '. –ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã, —Ç–∞–∫ –∫–∞–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å.')
    que = input()
    if que == "–Ω–µ—Ç":
        print(Fore.RED + '–í–≤–µ–¥–∏—Ç–µ token –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —É—á–∞—â–∏–º–∏—Å—è.')
        # print()

        token = input(Style.RESET_ALL)
        q = "UPDATE   cpu_inf set token = ? WHERE num = ?"

        data = (token, 1)
        c.execute(q, data)
        conn.commit()
        # teacher id
        print(Fore.RED + "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à id –≤ Telegram, —á—Ç–æ–±—ã –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å –≤–∞–º –≤–æ–ø—Ä–æ—Å—ã –æ—Ç —É—á–µ–Ω–∏–∫–æ–≤"
                         "(–æ —Ç–æ–º, –∫–∞–∫ —É–∑–Ω–∞—Ç—å —Å–≤–æ–π id –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—á–∏—Ç–∞—Ç—å –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ.")
        # print()

        t_id = input(Style.RESET_ALL)
        q = "UPDATE   cpu_inf set teacher_id = ? WHERE num = ?"
        data = (t_id, 1)
        c.execute(q, data)
        conn.commit()
        print(Style.RESET_ALL)
        print(Back.BLUE + 'Token –±–æ—Ç–∞: ' + token + 'token')
        print('–í–∞—à id: ' + t_id + 'id')
        print(Style.RESET_ALL + '–í–≤–µ–¥–∏—Ç–µ "–¥–∞", –µ—Å–ª–∏ –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤–≤–µ–¥–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –≤—ã–≤–µ–¥–∏—Ç–µ "–Ω–µ—Ç"'
                                '. –ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã, —Ç–∞–∫ –∫–∞–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å.')
        #que = input()


now = datetime.datetime.now()
_connection = None
s = open('zadachi.txt', 'r')
w = []
for line in s:
    w.append(line)
#–∑–∞–º–µ–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω –Ω–∞ —Ç–æ—Ç, —á—Ç–æ –±—É–¥—É—Ç –≤—Å—Ç–∞–≤–ª—è—Ç—å —Å–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
choose = "SELECT token FROM cpu_inf WHERE num=?"
data = (1,)
ch = c.execute(choose, data).fetchone()[0]
#print(ch)
bot = telebot.TeleBot(ch)
@bot.message_handler(commands=['answer'])
def check(message):
    id = int(message.from_user.id)

    conn = sqlite3.connect('db_second.db')
    c = conn.cursor()
    sql = "SELECT teacher_id FROM cpu_inf WHERE num=?"
    data = (1,)
    teacher_id = c.execute(sql, data).fetchone()[0]

    teacher_id = int(teacher_id)
    if id != teacher_id:
        bot.send_message(message.from_user.id, '–Ø –Ω–µ –∑–Ω–∞—é —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å üò¢')
    else:
        bot.send_message(message.from_user.id, '–æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ')
        bot.register_next_step_handler(message, reply)
def reply(message):
    conn = sqlite3.connect('db_second.db')
    c = conn.cursor()
    sql = "SELECT teacher_id from cpu_inf WHERE num=?"
    data = (1, )
    teach_id = c.execute(sql, data).fetchone()[0]


    #mess = {}
    mess = message.reply_to_message.text
    mess = mess.split('\n')
    repl = mess[-1]

    #–ø–µ—Ä–≤–æ–µ - –∫—É–¥–∞ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—à—å, –≤—Ç–æ—Ä–æ–µ - –æ—Ç–∫—É–¥–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ, —Ç—Ä–µ—Ç—å–µ - –∞–π–¥–∏ —Å–∞–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    print(repl[repl.find(':') + 1:], teach_id, message.message_id)
    bot.forward_message(repl[repl.find(':') + 1:], teach_id, message.message_id)





    #print(message)



@bot.message_handler(commands=['help'])
def appeal(message): #appeal - –æ–±—Ä–∞—â–µ–Ω–∏–µ

    global identifier


    identifier = int(message.from_user.id)
    x = "–æ—Ç–ø—Ä–∞–≤—å –¥–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏—è : –≤ –ø–µ—Ä–≤–æ–º —É–∫–∞–∂–∏ –ø—Ä–æ–±–ª–µ–º—É, –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏, –≤–æ –≤—Ç–æ—Ä–æ–º –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –∫–æ–¥," \
        " –µ—Å–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è, –∞ –∏–Ω–∞—á–µ –≤–≤–µ–¥–∏ –≤–º–µ—Å—Ç–æ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞ NO "
    bot.send_message(message.from_user.id, x)
    bot.register_next_step_handler(message, problem)
def problem(message):
    global teacher_id
    global text
    conn = sqlite3.connect('db_second.db')
    c = conn.cursor()
    sql = "SELECT teacher_id FROM cpu_inf WHERE num=?"
    data = (1,)
    teacher_id = c.execute(sql, data).fetchone()[0]
    #print(teacher_id)

    text = message.text
    #print(text)
    bot.register_next_step_handler(message, second_problem)


def second_problem(message):
    global name
    global teacher_id
    global text2
    global  first_name
    global last_name
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name


    print(name)
    text2 = message.text
    #print(text2 + '=text2')


    send_message_to_teacher()
def send_message_to_teacher():
    global identifier
    global name
    global teacher_id
    global text2
    global first_name
    global last_name

    full_name = name
    if text2.lower() == 'no':
        text2 = "–ò—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞ –Ω–µ –ø—Ä–∏–ª–∞–≥–∞–µ—Ç—Å—è."
    finished_mess = '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç: ' + first_name + ' ' + last_name + '\n' + text + '\n' + text2 + '\n' + 'user id:'+ str(identifier)
    print(identifier)
    bot.send_message(teacher_id, finished_mess)
    print(teacher_id)
    #—Ç—É—Ç —É–∂–µ –∏–¥–µ—Ç –ø–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —É—á–∏—Ç–µ–ª—é  + –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞...


@bot.message_handler(commands=['start'])
def getId(message):
    id = int(message.from_user.id)
    conn = sqlite3.connect("db_second.db")
    c = conn.cursor()

    sql = "SELECT * from id_login"
    l = c.execute(sql).fetchall()

    ok = True
    for i in l:
        if int(i[0] == id):
            ok = False

    if ok:
        print("Adding new user", id)
        sql = "INSERT INTO id_login(id) values(?)"
        c.execute(sql, (id,))
        conn.commit()
    else:
        print("User", id, "already exist")

    conn.close()

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–∑–∞–¥–∞—á–∞ 1")
    item2 = types.KeyboardButton("–∑–∞–¥–∞—á–∞ 2")
    item3 = types.KeyboardButton("–∑–∞–¥–∞—á–∞ 3")
    item4 = types.KeyboardButton("–∑–∞–¥–∞—á–∞ 4")
    item5 = types.KeyboardButton("–∑–∞–¥–∞—á–∞ 5")
    markup.add(item1, item2, item3, item4, item5)
    #sti = open('C:/Users/User/PycharmProjects/static/sticker.webp', 'rb')

    #bot.send_sticker(message.chat.id, sti)

    bot.send_message(message.chat.id,

                     "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - <b>{1.first_name}</b>, —Ç–æ—Ç —Å–∞–º—ã–π –±–æ—Ç, —á—Ç–æ –±—É–¥–µ—Ç —Ç–µ–±–µ —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª –ø–æ –∑–∞–¥–∞—á–∞–º —Å —Å–∞–π—Ç–∞ –∏ –±—É–¥–µ—Ç –≤—ã—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –Ω–æ–≤—ã–µ –¥–ª—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–≥–æ –∏—Ö —Ä–µ—à–µ–Ω–∏—è:)"
                     "–Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫–∏, —Ç—ã –ø–æ–ª—É—á–∏—à—å –Ω–µ–∫–æ—Ç–æ—Ä—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∫–∞–∂–¥–æ–π –∏–∑ –∑–∞–¥–∞—á.".format(

                         message.from_user, bot.get_me()),

                     parse_mode='html', reply_markup=markup)


logins = []
login = ""
name = ''
surname = ''
age = 0


@bot.message_handler(commands=['login'])
def start(message):
    bot.send_message(message.chat.id,
                     "–≤—ã—à–ª–∏ –º–Ω–µ —Å–≤–æ–∏ –§–ò–û acmp, —á—Ç–æ–±—ã —É—á–∏—Ç–µ–ª—å –º–æ–≥ —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Ç–≤–æ–∏–º–∏ —É—Å–ø–µ—Ö–∞–º–∏ –≤ —Ä–µ—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á.(—É—á–∏—Ç—ã–≤–∞—è "
                     "–≤–µ—Ä—Ö–Ω–∏–µ –∏ –Ω–∏–∂–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä—ã)")
    bot.register_next_step_handler(message, get_log)


def get_log(message):
    conn = sqlite3.connect("db_second.db")
    c = conn.cursor()
    ids = int(message.from_user.id)
    print(ids)
    global logins
    global login

    login = message.text
    print(login)
    question = '–∑–∞–ø–æ–º–Ω—é.'

    bot.send_message(message.chat.id, text=question)
    sqlite_select_query = """SELECT * from users"""
    c.execute(sqlite_select_query)
    records = c.fetchall()
    # print("Total rows are:  ", len(records))
    # print("Printing each row")
    name = '+_)(*?:%;‚Ññ"!!"‚Ññ;%:?*()_+—ë—ë–™]][][][{}":'

    second = login
    id = ids

    for row in records:

        # print(row[0], '    ', row[1])
        if row[0] == id:
            if row[1] != name:
                sql = "UPDATE users set  Name =  ?  where id = ? "
                data = (second, id)
                c.execute(sql, data)
                conn.commit()
                print('—É—Å–ø–µ—à–Ω–æ.')

        elif row[0] != id:
            select = "SELECT * FROM users"
            l = c.execute(select).fetchall()
            flag = True
            for i in l:
                if i[0] == id:
                    flag = False

            if flag:
                sql = "INSERT INTO users values(?, ?)"
                data = (id, second)
                c.execute(sql, data)
                conn.commit()
            else:
                pass
    conn.close()


@bot.message_handler(commands=['days'])
def start(message):
    bot.send_message(message.from_user.id,
                     "–≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏, –≤ –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±–µ —É–¥–æ–±–Ω–µ–µ –≤—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É(–Ω–∞–ø—Ä–∏–º–µ—Ä: "
                     "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ —Å—Ä–µ–¥–∞ –ø—è—Ç–Ω–∏—Ü–∞)")
    bot.register_next_step_handler(message, get_name)  # —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚Äì —Ñ—É–Ω–∫—Ü–∏—è get_name


# else:
#   ...#bot.send_message(message.from_user.id, '–ù–∞–ø–∏—à–∏ /reg')

def get_name(message):  # –ø–æ–ª—É—á–∞–µ–º —Ñ–∞–º–∏–ª–∏—é
    global name, id
    day = message.text.split()
    # print(day)
    for i in range(len(day)):
        day[i] = day[i].lower()
        # print(day[i])
    # day = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ü—è—Ç–Ω–∏—Ü–∞"]
    days = {"–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": u'0', "–≤—Ç–æ—Ä–Ω–∏–∫": u"1", "—Å—Ä–µ–¥–∞": u"2", "—á–µ—Ç–≤–µ—Ä–≥": u"3", "–ø—è—Ç–Ω–∏—Ü–∞": u"4", "—Å—É–±–±–æ—Ç–∞": u"5",
            "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ": u"6"}
    c = list(set(day) & set(days))
    id = int(message.from_user.id)
    res = []
    for i in c:
        res.append(int(days[i]))
    res.sort(reverse=False)
    print(res)

    conn = sqlite3.connect('db_second.db')
    c = conn.cursor()

    select = "SELECT * FROM days"
    l = c.execute(select).fetchall()
    kol = 0
    for i in l:
        if i[0] == id:
            kol += 1
    for i in range(kol):
        sql = "DELETE FROM days WHERE id = ?"
        data = (id,)
        c.execute(sql, data)
        conn.commit()
        print('–≥–æ—Ç–æ–≤–æ.')

    for i in range(len(res)):
        id = int(message.from_user.id)
        sql = "INSERT INTO days(id, days) values(?, ?)"
        data = (id, res[i])
        c.execute(sql, data)
        conn.commit()
        print('—É—Å–ø–µ—à–Ω–æ.')
    text = '–∑–∞–ø–æ–º–Ω—é.'
    bot.send_message(message.from_user.id, text=text)

    # rassilka
    select = "SELECT * FROM today_send_out"
    id = []
    l = c.execute(select).fetchall()
    for i in l:
        id.append(i[0])
    for i in l:
        print(i)
        for j in id:
            if j == i[0]:
                sql = "DELETE FROM today_send_out WHERE id=?"
                data = (j,)
                c.execute(sql, data)
    conn.commit()
    select = "SELECT * FROM days"
    l = c.execute(select).fetchall()
    days = []
    for i in l:
        if i[1] == str(now.weekday()):
            days.append(i[0])
    print(days)
    select = "SELECT * FROM today_send_out"
    sql = "INSERT INTO today_send_out(id) values(?)"

    for i in range(len(days)):
        id = days[i]
        data = (id,)
        c.execute(sql, data)
    conn.commit()
    text = '–≤—Ä–æ–¥–µ –¥–æ–±–∞–≤–∏–ª.'
    bot.send_message(message.from_user.id, text=text)

    # print(name)
    # bot.send_message(message.from_user.id, '—á–∏—Å–ª–æ –≤—Ç–æ—Ä–æ–≥–æ –¥–Ω—è')


'''def get_surname(message):
    global surname
    surname = message.text
    bot.send_message(message.from_user.id, '—á–∏—Å–ª–æ —Ç—Ä–µ—Ç—å–µ–≥–æ –¥–Ω—è')
    bot.register_next_step_handler(message, get_login)'''

'''def get_login(message):
    idk = int(message.from_user.id)
    conn = sqlite3.connect("db_second.db")
    global age

    age = str(message.text)  # –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–æ–∑—Ä–∞—Å—Ç –≤–≤–µ–¥–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    question = '–ø–æ–Ω—è–ª –ø—Ä–∏–Ω—è–ª'
    bot.send_message(message.from_user.id, text=question)
    day = [str(name), str(surname), str(age)]
    days = {"–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": u'0', "–≤—Ç–æ—Ä–Ω–∏–∫": u"1", "—Å—Ä–µ–¥–∞": u"2", "—á–µ—Ç–≤–µ—Ä–≥": u"3", "–ø—è—Ç–Ω–∏—Ü–∞": u"4", "—Å—É–±–±–æ—Ç–∞": u"5",
            "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ": u"6"}
    c = list(set(day) & set(days))
    all_days = []
    for i in c:
        print(i)  # all_days.append(i)
    c = conn.cursor()

    sql = "INSERT INTO days(id, days) values(?, ?)"
    vau = 1
    c.execute(sql, (idk, vau))
    conn.commit()'''


@bot.message_handler(content_types=['text'])
def lalala(message):
    if message.chat.type == 'private':

        if message.text.lower() == '–ø—Ä–∏–≤–µ—Ç':
            bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç! –ù–∞–¥–µ—é—Å—å , —á—Ç–æ —Ç—ã –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–º–æ—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã!')
        elif message.text.lower() == "–ø–æ–∫–∞":
            bot.send_message(message.chat.id, "–Ø —Ç–µ–±—è –Ω–µ –æ—Ç–ø—É—Å–∫–∞–ª, –ø—Ä–æ—â–∞–µ—Ç—Å—è –æ–Ω..")
        elif message.text.lower() == '–∑–∞–¥–∞—á–∞ 1':
            bot.send_message(message.chat.id, "–¢–∞ –ø–æ–ª–µ–∑–Ω–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞, —á—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è.")
            time.sleep(0.5)
            bot.send_message(message.chat.id, "–î–ª—è —è–∑—ã–∫–∞ Pascal:http://labs-org.ru/pascal-5/; ")
            time.sleep(0.5)
            bot.send_message(message.chat.id, "–î–ª—è C++:"
                                              "https://code-live.ru/post/cpp-arrays/; ")
            time.sleep(0.5)
            bot.send_message(message.chat.id, " –î–ª—è Python:"
                                              "https://otus.ru/nest/post/522/")
        elif message.text.lower() == '–∑–∞–¥–∞—á–∞ 2':
            bot.send_message(message.chat.id, "–¢–∞ –ø–æ–ª–µ–∑–Ω–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞, —á—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è.")
            time.sleep(0.5)
            bot.send_message(message.chat.id, "–î–ª—è —è–∑—ã–∫–∞ Pascal:http://labs-org.ru/pascal-5/; ")
            time.sleep(0.5)
            bot.send_message(message.chat.id, "–î–ª—è C++:"
                                              "https://code-live.ru/post/cpp-arrays/; ")
            time.sleep(0.5)
            bot.send_message(message.chat.id, " –î–ª—è Python:"
                                              "https://otus.ru/nest/post/522/")
        elif message.text.lower() == '–∑–∞–¥–∞—á–∞ 3':
            bot.send_message(message.chat.id, "–¢–∞ –ø–æ–ª–µ–∑–Ω–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞, —á—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è.")
            time.sleep(0.5)
            bot.send_message(message.chat.id, "–î–ª—è —è–∑—ã–∫–∞ Pascal:http://labs-org.ru/pascal-5/; ")
            time.sleep(0.5)
            bot.send_message(message.chat.id, "–î–ª—è C++:"
                                              "https://code-live.ru/post/cpp-arrays/; ")
            time.sleep(0.5)
            bot.send_message(message.chat.id, " –î–ª—è Python:"
                                              "https://otus.ru/nest/post/522/")
            time.sleep(0.5)
            markup = types.InlineKeyboardMarkup(row_width=2)
        elif message.text.lower() == '–∑–∞–¥–∞—á–∞ 5':
            bot.send_message(message.chat.id, "–î–ª—è Pascal:"
                                              "http://labs-org.ru/pascal-10/")
            time.sleep(0.5)
            bot.send_message(message.chat.id, "–î–ª—è –°++:"
                                              "https://code-live.ru/post/cpp-array-tutorial-part-2/")
            time.sleep(0.5)
            bot.send_message(message.chat.id, "–î–ª—è  Python: "
                                              "https://labs-org.ru/python-8/")
        elif message.text.lower() == '–∑–∞–¥–∞—á–∞ 4':
            bot.send_message(message.chat.id,
                             "–î–ª—è —Ä–µ—à–µ–Ω–∏—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏, –ø–æ–º–∏–º–æ –∑–Ω–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –º–∞—Å—Å–∏–≤–æ–≤, –≤–∞–º —Ç–∞–∫–∂–µ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏.")
            bot.send_message(message.chat.id, "–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è Pascal:"
                                              "https://pas1.ru/bubbles")
            time.sleep(0.5)
            bot.send_message(message.chat.id, "–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è C++:"
                                              "https://codelessons.ru/cplusplus/algoritmy/puzyrkovaya-sortirovka-v-c-glavnye-momenty.html")
            time.sleep(0.5)
            bot.send_message(message.chat.id, "–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ Python:"
                                              "https://tproger.ru/translations/python-sorting/")

            # item1 = types.InlineKeyboardButton("–•–æ—Ä–æ—à–æ", callback_data='good')
            # item2 = types.InlineKeyboardButton("–ù–µ –æ—á–µ–Ω—å", callback_data='bad')

            # markup.add(item1, item2)

            # bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ, —Å–∞–º –∫–∞–∫?', reply_markup=markup)
        else:
            bot.send_message(message.chat.id, '–Ø –Ω–µ –∑–Ω–∞—é —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å üò¢')


def send_message_to_user(message):
    conn = sqlite3.connect("db_second.db")
    c = conn.cursor()

    sql = "SELECT * from users"
    l = c.execute(sql).fetchall()

    for i in l:
        try:

            bot.send_message(i[0], message)
        except:
            pass
    conn.close()


mas = []

k = 0

# while k <= 1:


# RUN

   # bot.register_next_step_handler(message, answer() )
#def answer(message):
  #  return 1


bot.polling(none_stop=True)
